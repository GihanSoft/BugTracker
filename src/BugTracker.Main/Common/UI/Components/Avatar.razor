@using System.Buffers
@using System.Text
@if (AvatarUrl is not null)
{
    <img src="@AvatarUrl" class="avatar" @attributes="AdditionalAttributes" />
}
else
{
    <span class="avatar" style=@GetBgStyle()>
        @GetLetterAvatarString(AvatarAlt)
    </span>
}

@code {
    private static string GetLetterAvatarString(string? avatarAlt)
    {
        avatarAlt ??= "";
        Span<Range> parts = stackalloc Range[3];
        var letterCount = avatarAlt.AsSpan().Split(
            parts,
            ' ',
            StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        StringBuilder stringBuilder = new();
        for (int i = 0; i < letterCount; i++)
        {
            var letter = avatarAlt[parts[i].Start];
            stringBuilder.Append(letter);
        }

        return stringBuilder.ToString();
    }

    [Parameter] public string? AvatarUrl { get; set; }
    [Parameter] public string? AvatarAlt { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private static string GetBgStyle()
    {
        var bgColor = BackgroundColors.Dequeue();
        BackgroundColors.Enqueue(bgColor);
        return $"background-color: {bgColor}";
    }

    private static readonly Queue<string> BackgroundColors = new Queue<string>([
        "#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#16a085", "#27ae60", "#2980b9", "#8e44ad",
    "#f1c40f", "#e67e22", "#e74c3c", "#95a5a6", "#f39c12", "#d35400", "#c0392b", "#7f8c8d"
    ]);
}
