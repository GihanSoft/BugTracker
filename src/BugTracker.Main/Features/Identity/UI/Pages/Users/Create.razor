@using BugTracker.Main.Features.Identity
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@page "/Identity/Users/Create"

@inject MediatR.IMediator Mediator
@inject NavigationManager NavigationManager

@attribute [Authorize("sarvar")]

<PageTitle>کاربر جدید</PageTitle>

<div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">
    <div class="card">
        <div class="card-body">
            <EditForm Enhance
                      FormName="SignIn"
                      Model="InputModel"
                      enctype="multipart/form-data"
                      OnValidSubmit="OnValidSubmit"
                      class="d-flex flex-column gap-2">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div>
                    <InputFile name="InputModel.Avatar" class="form-control"/>
                </div>
                <div>
                    <label>
                        نام کاربری
                        <InputText @bind-Value="InputModel!.UserName" required class="form-control"/>
                    </label>
                </div>
                <div>
                    <label>
                        گذرواژه
                        <InputText type="password" @bind-Value="InputModel.Password" required class="form-control"/>
                    </label>
                </div>
                <div>
                    <label>
                        تایید گذرواژه
                        <InputText type="password" @bind-Value="InputModel.PasswordConfirmation" required class="form-control"/>
                    </label>
                </div>
                <div>
                    <label>
                        رایانامه
                        <InputText @bind-Value="InputModel.Email" type="email" autocomplete="email" class="form-control"/>
                    </label>
                </div>
                <div>
                    <label>
                        نام نمایشی
                        <InputText @bind-Value="InputModel!.DisplayName" class="form-control"/>
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">ذخیره</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private CreateUserInputModel? InputModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InputModel ??= new CreateUserInputModel();
    }

    private static async Task<string?> GetFileAsUrl(IFormFile formFile)
    {
        await using MemoryStream memoryStream = new();
        await formFile.CopyToAsync(memoryStream);
        var avatarBin = memoryStream.ToArray();
        var avatarBase64 = Convert.ToBase64String(avatarBin);
        var avatarUrl = $"data:{formFile.ContentType};base64," + avatarBase64;
        return avatarUrl;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        var avatarUrl = InputModel?.Avatar is not null
            ? await GetFileAsUrl(InputModel.Avatar)
            : null;

        CreateUser.Request request = new(
            InputModel!.UserName!,
            InputModel.Password!,
            InputModel.Email!,
            InputModel.DisplayName,
            avatarUrl);
        var response = await Mediator.Send(request);
        var result = response.IfLeft(error => throw error.ToException());

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Identity/Users");
            return;
        }

        ValidationMessageStore validationMessageStore = new(editContext);
        validationMessageStore.Add(() => InputModel.UserName!, result.Errors.Select(x => $"{x.Code} : {x.Description}"));
        editContext.NotifyValidationStateChanged();
    }

    class CreateUserInputModel
    {
        public IFormFile? Avatar { get; set; }
        [Required] public string? UserName { get; set; }
        [Required] public string? Password { get; set; }
        [Required, Compare(nameof(Password))] public string? PasswordConfirmation { get; set; }
        [Required, EmailAddress] public string? Email { get; set; }
        public string? DisplayName { get; set; }
    }

}
