@page "/Identity/Info"

@using System.Security.Claims
@using BugTracker.Main.Features.Identity

@attribute [Authorize]

@inject MediatR.IMediator Mediator

<PageTitle>اطلاعات حساب کاربری</PageTitle>

@if (_userInfo is not null)
{
    <div>
        <Avatar AvatarUrl="@_userInfo.Avatar" AvatarAlt="@_userInfo.UserName" alt="avatar" />
        <div>
            <span>نام نمایشی:</span> <span>@_userInfo.DisplayName</span>
        </div>
        <div>
            <span>نام کاربری:</span> <span>@_userInfo.UserName</span>
        </div>
        <div>
            <span>رایانامه:</span> <span>@_userInfo.Email</span>
            <span>@(_userInfo.EmailConfirmed ? "✔" : "❌")</span>
        </div>
        <div>
            <span>موبایل:</span> <span>@_userInfo.PhoneNumber</span>
            <span>@(_userInfo.PhoneNumberConfirmed ? "✔" : "❌")</span>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>type</th>
                    <th>value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _userInfo.Claims)
                {
                    <tr>
                        <td>@item.Type</td>
                        <td>@item.Value</td>
                    </tr>
                }
            </tbody>
            <caption class="caption-top">claims</caption>
        </table>
    </div>
}

@code {
    private ReadCurrentUserInfo.Response? _userInfo;

    protected override async Task OnInitializedAsync()
    {
        ReadCurrentUserInfo.Request request = new();
        var response = await Mediator.Send(request);
        response.Match(
            r => _userInfo = r,
            error => throw error.ToException()
        );
    }
}
