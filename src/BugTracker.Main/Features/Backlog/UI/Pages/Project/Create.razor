@page "/_/{OwnerKey}/create-project"

@using BugTracker.Main.Features.Backlog
@using BugTracker.Main.Features.Backlog.Data

@inject NavigationManager NavigationManager
@inject MediatR.IMediator Mediator

<PageTitle>ساختن پروژه</PageTitle>

<h3>ساختن پروژه جدید</h3>

<div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">
    <div class="card">
        <div class="card-body">
            <EditForm Model="InputModel" FormName="BacklogProjectCreate" OnValidSubmit="HandleValidSubmit" class="d-flex flex-column gap-2">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label>
                        آیدی پروژه
                        <InputText @bind-Value="InputModel!.Key" required class="form-control" />
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">بساز</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? OwnerKey { get; set; }

    [SupplyParameterFromForm] private FormModel InputModel { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        InputModel ??= new();

        await Task.CompletedTask;
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        CreateProject.Request request = new(InputModel.Key);
        var response = await Mediator.Send(request);
        response.Match(
            r => NavigationManager.NavigateTo($"/_/{OwnerKey}"),
            l =>
            {
                ValidationMessageStore validationMessageStore = new(editContext);
                validationMessageStore.Add(() => request.Key, l.Message);
                l.Inner.IfSome(inner => validationMessageStore.Add(() => request.Key, inner.Message));
                editContext.NotifyValidationStateChanged();
            });
    }

    class FormModel
    {
        public string Key { get; set; } = "";
    }
}