@page "/Backlog/{OwnerKey}/{ProjectKey}/PBI/Create"
@using BugTracker.Main.Features.Backlog.Data
@using Microsoft.EntityFrameworkCore

@inject BacklogDbContext Db
@inject NavigationManager NavigationManager

<PageTitle>PBI جدید</PageTitle>

<h3>PBI جدید</h3>

<div class="flex-grow-1">
    <EditForm Enhance
              Model="Input"
              FormName="backlog-pbi-create"
              OnValidSubmit="OnValidSubmit">
        <div>
            <label class="form-label w-100">
                عنوان:
                <InputText @bind-Value="Input.Title" required class="form-control w-100" />
            </label>
        </div>
        <div>
            <label class="form-label w-100">
                شرح:
                <InputTextArea @bind-Value="Input.Description" class="form-control w-100" />
            </label>
        </div>
        <button type="submit" class="btn btn-primary w-25">ذخیره</button>
    </EditForm>
</div>
@*
<EditForm Model="_input" FormName="backlog-pbi-create" Enhance class="vertical-mini-form" OnValidSubmit="OnValidSubmit">
    <label>
        عنوان:
        <InputText @bind-Value="_input!.Title" required />
    </label>
    <label>
        توضیح:
        <InputTextArea @bind-Value="_input!.Content" />
    </label>
    <div>
        <button type="submit">ایجاد</button>
    </div>
</EditForm>
 *@
@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter] public string? OwnerKey { get; set; }
    [Parameter] public string? ProjectKey { get; set; }

    [SupplyParameterFromForm] private FormInput Input { get; set; } = new();

    private async Task OnValidSubmit(EditContext editContext)
    {
        if (OwnerKey is null || ProjectKey is null)
            return;

        if (AuthenticationStateTask is null)
            return;

        var authenticationState = await AuthenticationStateTask;
        var username = authenticationState.User.Identity?.Name;
        if (username is null || username != OwnerKey)
            return;

        var project = await Db.Projects.FirstOrDefaultAsync(x => x.OwnerKey == OwnerKey && x.Key == ProjectKey);
        if (project is null)
            return;

        await Db.ProductBacklogItems.AddAsync(new Features.Backlog.ProductBacklogItem
            {
                Id = new Features.Backlog.ProductBacklogItemId(0),
                Title = Input.Title!,
                Description = Input.Description ?? "",
                ProjectId = project.Id,
                Project = null!,
            });

        var result = await Db.SaveChangesAsync();
        NavigationManager.NavigateTo($"/Backlog/{OwnerKey}/{ProjectKey}");
    }

    class FormInput
    {
        public string? Title { get; set; }
        public string? Description { get; set; }
    }
}
