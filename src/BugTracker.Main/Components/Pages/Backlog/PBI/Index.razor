@page "/Backlog/{OwnerKey}/{ProjectKey}/{Id?}"

@using BugTracker.Main.Features.Backlog
@using BugTracker.Main.Features.Backlog.Data
@using Microsoft.EntityFrameworkCore

@inject BacklogDbContext Db
@inject NavigationManager NavigationManager

<div class="container flex-grow-1 d-flex flex-column gap-2">
    <NavLink href=@($"/Backlog/{OwnerKey}/{ProjectKey}/PBI/Create") class="btn btn-outline-primary w-25"> جدید </NavLink>

    @if (_currentItem is not null)
    {
        <form data-enhance href=@PbiIdToLink(_currentItem.Id) method="post" @formname="backlog-pbi-delete" @onsubmit="OnDeleteSubmit">
            <AntiforgeryToken />
            <button type="submit" class="btn btn-danger w-25">حذف</button>
        </form>
        <div class="flex-grow-1">
            <EditForm Enhance
                      Model="EditInput"
                      FormName="backlog-pbi-edit"
                      OnValidSubmit="OnEditValidSubmit"
                      class="vertical-mini-form">
                <div>
                    <label class="form-label w-100">
                        عنوان:
                        <InputText @bind-Value="EditInput.Title" required class="form-control w-100" />
                    </label>
                </div>
                <div>
                    <label class="form-label w-100">
                        شرح:
                        <InputTextArea @bind-Value="EditInput.Description" class="form-control w-100" />
                    </label>
                </div>
                <button type="submit" class="btn btn-primary w-25">ذخیره</button>
            </EditForm>
        </div>
    }

    <div>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>عنوان</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _items)
                {
                    <tr>
                        <td>@item.Title</td>
                        <td>
                            <NavLink href=@PbiIdToLink(item.Id) class="link-primary link-underline-opacity-0">نمایش</NavLink>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter] public string? Id { get; set; }
    [Parameter] public string? OwnerKey { get; set; }
    [Parameter] public string? ProjectKey { get; set; }

    [SupplyParameterFromForm] private EditInputModel? EditInput { get; set; }

    private IEnumerable<ProductBacklogItem> _items = [];
    private ProductBacklogItem? _currentItem;

    protected override async Task OnInitializedAsync()
    {
        if (OwnerKey is null || ProjectKey is null)
            return;

        if (AuthenticationStateTask is null)
            return;

        var authenticationState = await AuthenticationStateTask;
        var username = authenticationState.User.Identity?.Name;
        if (username is null || username != OwnerKey)
            return;

        _items = await Db.ProductBacklogItems
            .Include(x => x.Project)
            .Where(x => x.Project.Key == ProjectKey && x.Project.OwnerKey == OwnerKey)
            .ToListAsync();

        if (Id is not null)
        {
            var typedId = ProductBacklogItemId.Parse(Id);
            _currentItem = await Db.ProductBacklogItems
                .FirstOrDefaultAsync(x => x.Id == typedId);
            if (EditInput is null)
            {
                EditInput ??= new();
                EditInput.Title = _currentItem?.Title;
                EditInput.Description = _currentItem?.Description;
            }
        }
    }

    private async Task OnEditValidSubmit()
    {
        if (OwnerKey is null || ProjectKey is null)
            return;

        if (AuthenticationStateTask is null)
            return;

        var authenticationState = await AuthenticationStateTask;
        var username = authenticationState.User.Identity?.Name;
        if (username is null || username != OwnerKey)
            return;

        if (_currentItem is null)
            return;

        Db.ProductBacklogItems.Attach(_currentItem);
        _currentItem.Title = EditInput.Title ?? "";
        _currentItem.Description = EditInput.Description ?? "";

        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

    protected async Task OnDeleteSubmit()
    {
        if (_currentItem is null)
            return;

        Db.ProductBacklogItems.Remove(_currentItem);

        var result = await Db.SaveChangesAsync();
    }

    private string PbiIdToLink(ProductBacklogItemId id) => $"/Backlog/{OwnerKey}/{ProjectKey}/{id.Value}";
    private string PbiIdToDelete(ProductBacklogItemId id) => $"/Backlog/PBI/{id.Value}/Delete";

    class EditInputModel
    {
        public string? Title { get; set; }
        public string? Description { get; set; }
    }
}