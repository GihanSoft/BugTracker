@using BugTracker.Main.Features.Identity
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@page "/Identity/SignIn"

@inject SignInManager<AppUser> SignInManager
@inject NavigationManager NavigationManager

<div class="flex-grow-1 d-flex flex-column justify-content-center align-items-center">
    <div class="card">
        <div class="card-body">
            <EditForm FormName="SignIn" Model="InputModel" OnValidSubmit="OnValidSubmit" class="d-flex flex-column gap-3">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label class="form-label">
                        نام کاربری
                        <InputText @bind-Value="InputModel!.UserName" required class="form-control" />
                    </label>
                </div>
                <div>
                    <label class="form-label">
                        گذرواژه
                        <InputText @bind-Value="InputModel!.Password" type="password" required class="form-control" />
                    </label>
                </div>
                <div>
                    <label class="form-check-label d-flex gap-2">
                        <InputCheckbox @bind-Value="InputModel!.Remember" class="form-check-input" />
                        مرا به خاطر بسپار
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">ورود</button>
            </EditForm>
        </div>
        <div class="card-footer">
            <NavLink href="/Identity/SignUp" class="link-info link-offset-1 link-underline-opacity-50 link-underline-opacity-100-hover">ثبت‌نام</NavLink>
            <span>|</span>
            <NavLink href="/Identity/ForgotPassword" class="link-info link-offset-1 link-underline-opacity-50 link-underline-opacity-100-hover">فراموشی گذرواژه</NavLink>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private SignInInputModel? InputModel { get; set; }

    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null &&
            await AuthenticationState is AuthenticationState authenticationState
            && authenticationState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/Identity/Info", false, true);
        }

        InputModel ??= new();
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        var result = await SignInManager.PasswordSignInAsync(
            InputModel!.UserName!,
            InputModel.Password!,
            InputModel.Remember,
            true);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }

        if (result.RequiresTwoFactor)
        {
            NavigationManager.NavigateTo("/Identity/2FA");
        }

        ValidationMessageStore validationMessageStore = new(editContext);

        switch (result)
        {
            case { IsLockedOut: true }:
                validationMessageStore.Add(() => InputModel.UserName!, "locked out");
                break;
            case { IsNotAllowed: true }:
                validationMessageStore.Add(() => InputModel.UserName!, "not allowed to sign-in");
                break;
            default:
                validationMessageStore.Add(() => InputModel.Password!, "password mismatch");
                break;
        }

        editContext.NotifyValidationStateChanged();
    }

    class SignInInputModel()
    {
        [Required]
        public string? UserName { get; set; }
        [Required]
        public string? Password { get; set; }
        public bool Remember { get; set; }
    }
}
